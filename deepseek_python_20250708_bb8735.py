import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
TOKEN = "–í–ê–®_TELEGRAM_BOT_TOKEN"

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='subscribe')],
        [InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data='unsubscribe')],
        [InlineKeyboardButton("–ë–ª–∏–∂–∞–π—à–∞—è –≤—Å—Ç—Ä–µ—á–∞", callback_data='next_meeting')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç –∫–∏–Ω–æ-–∫–ª—É–±–∞ '–û–¥–∏—Å—Å–µ—è'.\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –Ω–∞—à–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö —Ñ–∏–ª—å–º–æ–≤.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    if query.data == 'subscribe':
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
        query.edit_message_text("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö.")
    elif query.data == 'unsubscribe':
        # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø–∏—Å–∫–∏
        query.edit_message_text("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ /start")
    elif query.data == 'next_meeting':
        send_next_meeting_info(update.effective_chat.id)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å—Ç—Ä–µ—á–µ
def send_next_meeting_info(chat_id):
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å—Ç—Ä–µ—á–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
    meeting_info = {
        'date': '15 –∏—é–ª—è 2023',
        'time': '19:00',
        'place': '–ö–æ—Ñ–µ–π–Ω—è "–¢–æ–º –°–æ–π–µ—Ä", —É–ª. –®–º–∏–¥—Ç–∞, 12',
        'film': '¬´–ù–µ –Ω–∞–¥–æ –Ω–∏–∫–æ–≥–æ —Å–ø–∞—Å–∞—Ç—å¬ª (2025)'
    }
    
    message = (
        f"üé¨ <b>–ë–ª–∏–∂–∞–π—à–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∫–∏–Ω–æ-–∫–ª—É–±–∞:</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {meeting_info['date']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {meeting_info['time']}\n"
        f"üìç <b>–ú–µ—Å—Ç–æ:</b> {meeting_info['place']}\n"
        f"üé• <b>–§–∏–ª—å–º:</b> {meeting_info['film']}\n\n"
        f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º –∑–∞—Ä–∞–Ω–µ–µ!"
    )
    
    context.bot.send_message(
        chat_id=chat_id,
        text=message,
        parse_mode='HTML'
    )

# –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
def send_notification(context: CallbackContext):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ chat_id –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    subscribers = []  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    for chat_id in subscribers:
        send_next_meeting_info(chat_id)

def main() -> None:
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    job_queue = updater.job_queue
    job_queue.run_repeating(send_notification, interval=604800, first=0)  # –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()